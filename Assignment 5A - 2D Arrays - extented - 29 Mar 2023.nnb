{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "### 2D Arrays - Extended"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "> Make sure to create a helper function to print the Array and reuse it."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "❓ **Transpose a matrix**\n\nGiven a matrix of m x n. Write a `transpose()` function that will return the transpose matrix n x m.\n\n👀 Example\n\nInput\n```\n1 2\n3 4\n5 6\n```\n\nOutput\n```\n1 3 5\n2 4 6\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const transpose=(array)=>{\r\n    let result=[];\r\n    for(let column=0;column<array[0].length;column++){\r\n        result[column]=[];\r\n        for(let row=0;row<array.length;row++){\r\n            // error throw -> when size of row differs\r\n            if(array[row].length!=array[0].length){\r\n                return \"size imperfect\";\r\n            }\r\n            result[column].push(array[row][column]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nconsole.log(transpose([[1,2],[3,4],[5,6]]));"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "❓ **Spiral order**\n\nGiven a matrix of n x n elements, return all elements of the matrix in spiral order.\n\n👀 Example\n\nInput \n```\n 1 2 3\n 4 5 6 \n 7 8 9\n```\n\noutput\n```\n1 2 3 6 9 8 7 4 5\n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const spiral=(array)=>{\r\n    let start=0, top=0;\r\n    let end=array[0].length-1, bottom=array.length-1;\r\n    let count=1, row=0, column=0;\r\n    let result=\"\";\r\n    result+=array[row][column]+\" \";\r\n    while(count<=(array[0].length*array.length)){\r\n        if(column<end && row==top){\r\n            column++;  \r\n            result+=array[row][column]+\" \";\r\n        }\r\n        else if(column==end && row<bottom){\r\n            row++;\r\n            result+=array[row][column]+\" \";\r\n        }\r\n        else if(row==bottom && column>start){\r\n            column--;\r\n            result+=array[row][column]+\" \";\r\n        }\r\n        else if(column==start && row>top+1){\r\n            row--;\r\n            result+=array[row][column]+\" \";\r\n        }\r\n        else{\r\n            top++;\r\n            start++;\r\n            end--;\r\n            bottom--;\r\n        }\r\n        count++;\r\n    }\r\n    return result;\r\n}\r\nconsole.log(spiral([[1,2,3],[4,5,6],[7,8,9]]));"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "❓ **Spiral Matrix II**\n\nGiven a positive integer n, generate a square matrix filled with elements from 1 to n^2  in spiral order.\n\nexample 1:\n\nInput: \n``` \n3\n```\n\nOutput:\n```\n1 2 3 \n8 9 4\n7 6 5 \n```"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const spiral=(size)=>{\r\n    let array=[];\r\n    // initializing resultant array\r\n    for(let row=0;row<size;row++){\r\n        array.push([]);\r\n        for(let column=0;column<size;column++){\r\n            array[row].push(0);\r\n        }\r\n    }\r\n    let start=0, top=0;\r\n    let end=array[0].length-1, bottom=array.length-1;\r\n    let count=0, row=0, column=0;\r\n    // iterating through total number of items.\r\n    while(count<size**2){\r\n        // assigning count value to the resultant array\r\n        array[row][column]=count+1;\r\n        if(column<end && row==top){\r\n            column++;  \r\n        }\r\n        else if(column==end && row<bottom){\r\n            row++;\r\n        }\r\n        else if(row==bottom && column>start){\r\n            column--;\r\n        }\r\n        else if(column==start && row>top+1){\r\n            row--;\r\n        }\r\n        else{\r\n            top++;\r\n            start++;\r\n            end--;\r\n            bottom--;\r\n        }\r\n        // special case for stop increamenting count when spiral size decreases\r\n        if(column==start && row==top+1){\r\n            count=count;\r\n        }\r\n        else{\r\n            count++;\r\n        }\r\n    }\r\n    array[row][column]=count;\r\n    return array;\r\n}\r\nconsole.log(spiral(5));"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "❓ **Find a common element in all rows of a given row-wise sorted matrix**\r\n\r\nGiven a matrix where every row is sorted in increasing order. Write a function `findCommon()` that finds and returns a common element in all rows. If there is no common element, then returns -1.\r\n\r\n👀 Example\r\n\r\nInput: `mat[4][5]` \r\n```\r\n   1 2 3 4 5\r\n   2 4 5 8 10\r\n   3 5 7 9 11\r\n   1 3 5 7 9\r\n```\r\n\r\noutput\r\n```\r\n    5\r\n```\r\n\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const findCommon=(array)=>{\r\n    let result=[];\r\n    let row=0;\r\n    for(let column=0;column<array[0].length;column++){\r\n        let count=1;\r\n        for(let otherRows=1;otherRows<array.length;otherRows++){\r\n            if(array[otherRows].includes(array[row][column])){\r\n                count++;\r\n            }\r\n        }\r\n        if(count==array.length){\r\n            result.push(array[row][column])\r\n        }\r\n    }\r\n    return result;\r\n}\r\nconsole.log(findCommon([[1,2,3,4,5],[2,4,5,8,10],[2,5,7,9,11],[1,2,3,5,7,9]]));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 2, 5 ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "❓ **Sweep column & row**\n\nGiven a boolean matrix `mat[M][N]` of size `M X N`, modify it such that if a matrix cell `mat[i][j]` is `1` (or true) then make all the cells of `ith row` and `jth column` as `1`. \n\n> Create a separate helper function each to sweep a particular column (name: `sweep2DColumn`) and row (`sweep2DRow`) \n\n\nExample 1: \n\nInput :\n```\n1 0\n0 0\n```\n\nOutput : \n```\n1 1\n1 0\n```\n\nExample 2: \n\nInput:\n```\n0 0 0\n0 1 0\n1 0 0\n```\n\nOutput:\n\n```\n1 1 0\n1 1 1\n1 1 1\n```\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const sweep=(array)=>{\r\n    // initializing the 2-d array with 0's for resultant\r\n    let result=[];\r\n    for(let row=0;row<array.length;row++){\r\n        result.push([]);\r\n        for(let column=0;column<array[row].length;column++){\r\n            result[row].push(0);\r\n        }\r\n    }\r\n    // checking for 1's in original array and replacing with 1's in resultant array\r\n    for(let row=0;row<array.length;row++){\r\n        for(let column=0;column<array[row].length;column++){\r\n            if(array[row][column]==1){\r\n                // to iterate through same row and column\r\n                for(let index=0;index<array.length;index++){\r\n                    result[row][index]=1;\r\n                    result[index][column]=1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n// console.log(sweep([[0,0,0],[0,1,0],[1,0,0]]))\r\nconsole.log(sweep([[1,0],[0,0]]));"
            ],
            "outputs": []
        }
    ]
}