{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Trees"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Create a binary tree and implement all the below mentioned traversal methods?\nAn image is attached to the assignment as an example, please refer. \n1. Inorder traversal\n\t```\n\tExpected Output\n\t1, 2, 5, 7, 10, 11, 15, 25\n\t```\n2. Preorder traversal\n\t```\n\tExpected Output\n\t10, 5, 2, 1, 7, 15, 11, 25\n\t```\n3. Postorder traversal\n\t```\n\tExpected Output\n\t1, 2, 7, 5, 11, 25, 15, 10\n\t```\n4. Reversed post order traversal\n\t```\n\tExpected Output\n\t25, 11, 15, 7, 1, 2, 5, 10\n\t```\n5. Level order traversal\n\t```\n\tExpected Output\n\t10, 5, 15, 2, 7, 11, 25, 1\n\t```\n> ### âš : Return comma separated string as output for the above traversals."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function Node(data) {\r\n    this.data = data;\r\n    this.left = null;\r\n    this.right = null;\r\n}\r\nclass LinearTree {\r\n    constructor() {\r\n        this.root = null;\r\n        this.parent = null;\r\n        this.result = [];\r\n        this.stack1 = [];\r\n        this.stack2 = [];\r\n    }\r\n    addChild(data) {\r\n        let newNode = new Node(data);\r\n        if (this.root == null) {\r\n            this.root = newNode;\r\n        }\r\n        else {\r\n            let queue = [this.root];\r\n            while (queue.length > 0) {\r\n                let currentNode = queue.shift();\r\n                if (currentNode.left == null) {\r\n                    currentNode.left = newNode;\r\n                    break;\r\n                }\r\n                else if (currentNode.right == null) {\r\n                    currentNode.right = newNode;\r\n                    break;\r\n                }\r\n                else {\r\n                    queue.push(currentNode.left);\r\n                    queue.push(currentNode.right);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    inOrder() {\r\n        if (this.root == null) {\r\n            console.log(\"tree is blank\");\r\n        }\r\n        else {\r\n            this.result = [];\r\n            let nodes = [];\r\n            let currentNode = this.root;\r\n            while (currentNode != null || nodes.length > 0) {\r\n                while (currentNode != null) {\r\n                    nodes.push(currentNode);\r\n                    currentNode = currentNode.left;\r\n                }\r\n                currentNode = nodes.pop();\r\n                this.result.push(currentNode.data);\r\n                currentNode = currentNode.right;\r\n            }\r\n        }\r\n        return this.result;\r\n    }\r\n    preOrder() {\r\n        if (this.root == null) {\r\n            console.log(\"tree is blank\");\r\n        }\r\n        else {\r\n            this.result = [];\r\n            let nodes = [];\r\n            let currentNode = this.root;\r\n            while (currentNode != null || nodes.length > 0) {\r\n                while (currentNode != null) {\r\n                    this.result.push(currentNode.data);\r\n                    nodes.push(currentNode);\r\n                    currentNode = currentNode.left;\r\n                }\r\n                currentNode = nodes.pop();\r\n                currentNode = currentNode.right;\r\n            }\r\n        }\r\n        return this.result;\r\n    }\r\n    postOrder() {\r\n        if (this.root == null) {\r\n            console.log(\"tree is blank\");\r\n        }\r\n        else {\r\n            this.stack1.push(this.root);\r\n            while (this.stack1.length > 0) {\r\n                let node = this.stack1.pop();\r\n                this.stack2.push(node);\r\n                if (node.left != null) {\r\n                    this.stack1.push(node.left);\r\n                }\r\n                if (node.right != null) {\r\n                    this.stack1.push(node.right);\r\n                }\r\n            }\r\n            while (this.stack2.length > 0) {\r\n                let node = this.stack2.pop();\r\n                this.result.push(node.data);\r\n            }\r\n        }\r\n        return this.result;\r\n    }\r\n    levelOrder() {\r\n        this.stack1.push(this.root);\r\n        while(this.stack1.length > 0) {\r\n            let currentNode = this.stack1.shift();\r\n            this.result.push(currentNode.data);\r\n            if(currentNode.left != null){\r\n                this.stack1.push(currentNode.left);\r\n            }\r\n            if(currentNode.right != null){\r\n                this.stack1.push(currentNode.right);\r\n            }\r\n        }\r\n        return this.result;\r\n    }\r\n    reversePostOrder() {\r\n        if (this.root == null) {\r\n            console.log(\"tree is blank\");\r\n        }\r\n        else {\r\n            this.stack1.push(this.root);\r\n            while (this.stack1.length > 0) {\r\n                let node = this.stack1.pop();\r\n                this.stack2.push(node);\r\n                if (node.right != null) {\r\n                    this.stack1.push(node.right);\r\n                }\r\n                if (node.left != null) {\r\n                    this.stack1.push(node.left);\r\n                }\r\n            }\r\n            while (this.stack2.length > 0) {\r\n                let node = this.stack2.pop();\r\n                this.result.push(node.data);\r\n            }\r\n        }\r\n        return this.result;\r\n    }\r\n\r\n}\r\n\r\n// var assert = require('assert')\r\nlet linearTree = new LinearTree();\r\nlinearTree.addChild(10)\r\nlinearTree.addChild(5)\r\nlinearTree.addChild(15);\r\n// // console.log(linearTree.inorder())\r\n// // assert.deepEqual(linearTree.inorder(), [2, 1, 3])\r\nlinearTree.addChild(2)\r\nlinearTree.addChild(7)\r\nlinearTree.addChild(11);\r\nlinearTree.addChild(25);\r\nlinearTree.addChild(1);\r\nconsole.log(linearTree.reversePostOrder())\r\n// assert.deepEqual(linearTree.inorder(), [4, 2, 5, 1, 6, 3])\r\n\r\n\r\n"
            ],
            "outputs": []
        }
    ]
}